
- hosts: 127.0.0.1
  connection: local
  vars_files:
    - vars/configure_vars.yml
    - vars/vault.yml

  vars:
     create_file_system: off
     storage_local_device: /dev/sdb
     swift_url_template:
     swift_container_prefix:
     _cert:
     _private_key:
     _s3_access:
     _s3_secret:

  pre_tasks:
    - name: Create cert file
      shell: cp "{{ cert_file_path }}" "vars/triliovault.cert"
      when: enable_tls == True

    - name: Create privatekey file
      shell: cp "{{ privatekey_file_path }}" "vars/triliovault.key"
      when: enable_tls == True

    - name: Format cert file
      shell: "sed 's/$/\\r\\n/' 'vars/triliovault.cert'"
      when: enable_tls == True

    - name: Format privatekey file
      shell: "sed 's/$/\\r\\n/' 'vars/triliovault.key'"
      when: enable_tls == True

    - name: Fetch cert data
      shell: cat vars/triliovault.cert
      when: enable_tls == True
      ignore_errors: true
      register: cert

    - name: Fetch key data
      shell: cat vars/triliovault.key
      when: enable_tls == True
      ignore_errors: true
      register: privatekey

    - name: Set cert
      set_fact: _cert={{ cert.stdout.replace('+','%2B') }}
      when: enable_tls == True
    - debug: var=_cert

    - name: Set private key
      set_fact: _private_key={{ privatekey.stdout.replace('+','%2B') }}
      when: enable_tls == True
    - debug: var=_private_key

    - name: Set s3 access key
      set_fact: _s3_access={{ s3_access_key.replace('+','%2B') }}
      when: backup_target_type == "S3"
    - debug: var=_s3_access

    - name: Set s3 secret key
      set_fact: _s3_secret={{ s3_secret_key.replace('+','%2B') }}
      when: backup_target_type == "S3"
    - debug: var=_s3_secret

    - name: Set import variable
      set_fact: _import=on
      when: import_workloads == True

    - name: Set import variable
      set_fact: _import=off
      when: import_workloads == False

    - name: Set tls variable
      set_fact: _tls=on
      when: enable_tls == True

    - name: Set tls variable
      set_fact: _tls=off
      when: enable_tls == False

    - debug: var=_tls
    - debug: var=_import

  tasks:
  - name: login node
    shell: curl -k --cookie-jar '{{ cookie }}' --data 'username={{ configurator_username }}&password={{ configurator_password }}' 'https://{{ configurator_node_ip }}/login'

  - name: configure node data
    shell: curl -k --cookie '{{ cookie }}' --data '{{ v1 }}={{ controller_nodes }}&{{ v2 }}={{ virtual_ip }}&{{ v3 }}={{ admin_username }}&{{ v4 }}={{ admin_password }}&{{ v5 }}={{ admin_tenant_name }}&{{ v6 }}={{ keystone_admin_url }}&{{ v7 }}={{ keystone_public_url }}&{{ v8 }}={{ name_server }}&{{ v9 }}={{ domain_search_order}}&{{ v10 }}={{ region_name }}&backup_target_type={{ backup_target_type }}&{{ v12 }}={{ create_file_system }}&{{ v13 }}={{ storage_local_device }}&{{ v14 }}={{ storage_nfs_export }}&{{ v15 }}={{ swift_auth_version }}&{{ v16 }}={{ swift_auth_url }}&{{ v18 }}={{ domain_id }}&{{ v19 }}={{ ntp_enabled }}&{{ v20 }}={{ ntp_servers }}&{{ v21 }}={{ timezone }}&trustee-role={{ trustee_role }}&{{ v22 }}={{ swift_username }}&{{ v23 }}={{ swift_password }}&{{ v24 }}={{ _tls }}&{{ v25 }}={{ _cert }}&{{ v26 }}={{ _private_key }}&{{ v27 }}={{ _s3_access }}&{{ v28 }}={{ _s3_secret }}&{{ v29 }}={{ s3_region_name }}&{{ v30 }}={{ s3_bucket }}&{{ v31 }}={{ s3_endpoint_url }}&{{ v32 }}={{ s3_ssl_enabled }}&{{ v33 }}={{ s3_type }}&{{ v34 }}={{ dm_endpoint }}&workloads-import={{ _import }}' 'https://{{ configurator_node_ip }}/configure_openstack'
    register: check

  - name: populate variables
    shell: curl -k --cookie '{{ cookie }}' 'https://{{ configurator_node_ip }}/populate_variables'

  - name: configure host
    shell: curl -k --cookie '{{ cookie }}' 'https://{{ configurator_node_ip }}/configure_host'
    ignore_errors: false
    register: check

  - action: fail msg="Error while configuring host"
    when: check.rc != 0

  - name: configure workloadmgr
    shell: curl -k --cookie '{{ cookie }}' 'https://{{ configurator_node_ip }}/configure_workloadmgr'
    ignore_errors: false
    register: check

  - action: fail msg="Error while configuring workloadmgr"
    when: check.rc != 0

  - name: register workloadtypes
    shell: curl -k --cookie '{{ cookie }}' 'https://{{ configurator_node_ip }}/register_workloadtypes'
    ignore_errors: false
    register: check

  - action: fail msg="Error while registering workload types"
    when: check.stdout.find('Success') == -1

